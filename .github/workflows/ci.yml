name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test: 


  build:
    name: Build and Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install Debian packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev

      - name: Generate collector code
        run: |
          go run go.opentelemetry.io/collector/cmd/builder@latest --config builder-config.yaml

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          cd dist
          go build -ldflags="-s -w" -o ../otelcol-custom .

      - name: Validate config.yaml for otelcol-custom
        # if: matrix.goarch == 'amd64'
        run: |
          export METRICS_SCRAPE_INTERVAL=60s
          export NETWORK_INTERFACES='["eth0"]'
          export MOUNT_POINTS='["/"]'
          export METRICS_BATCH_INTERVAL=200ms
          export SITE_NAME='example-site'
          export DASH0_API_KEY='placeholder'
          ./otelcol-custom --config config.yaml validate

      - name: Create Debian package
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
            ./build-deb.sh otelcol-custom ${{ matrix.goarch }} "${VERSION}"
          else
            ./build-deb.sh otelcol-custom ${{ matrix.goarch }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: otelcol-custom-${{ matrix.suffix }}
          path: |
            otelcol-custom_*_${{ matrix.goarch }}.deb
            otelcol-custom_*_${{ matrix.goarch }}.deb.sha256

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.deb*" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          body: |
            1. Download the appropriate .deb package for your architecture
            2. Install: `sudo dpkg -i otelcol-custom_${{ steps.version.outputs.version }}_<arch>.deb`
            3. The service will be automatically enabled and started but will fail due to missing ENV vars
            4. Define missing ENV vars including API key in /etc/otelcol-custom/otel-custom.conf
            5. Restart: `sudo systemctl restart otelcol-custom`
            6. Check status: `sudo systemctl status otelcol-custom`

          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
